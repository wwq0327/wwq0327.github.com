<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | WanQing's Blog]]></title>
  <link href="http://wwq0327.github.com/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://wwq0327.github.com/"/>
  <updated>2012-07-15T21:48:56+08:00</updated>
  <id>http://wwq0327.github.com/</id>
  <author>
    <name><![CDATA[wwq0327]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django 开发记事]]></title>
    <link href="http://wwq0327.github.com/blog/2012/07/15/django-note/"/>
    <updated>2012-07-15T17:28:00+08:00</updated>
    <id>http://wwq0327.github.com/blog/2012/07/15/django-note</id>
    <content type="html"><![CDATA[<p>记录Django开发中所遇问题及简单记录解决办法。</p>

<ul>
<li>Category中出现python 类名</li>
</ul>


<p>问题：
```
做了一个记录文章分类的model，内容是这样的：</p>

<p>class Category(models.Model):</p>

<pre><code>name = models.CharField(max_length=255)

class Meta:
    ordering = ['-id']

def __unicode__(self):
    return "Category %s" % self.name
</code></pre>

<p>然后在forms.py中这样处理</p>

<p>po_type = forms.ModelChoiceField(label=u"文章类型", queryset=Category.objects.all())</p>

<p>渲染成html后，在下接列表中，除了分类名之外，在生个分类名前，还多了"Category"这个词。
```</p>

<p>解决办法，去掉models中的<code>__unicode__</code>中的"Category %s"这一部份就行了。</p>

<p>另外，在forms中的那句实际上可以直接不要的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[South 使用记录]]></title>
    <link href="http://wwq0327.github.com/blog/2012/05/21/django-south-install/"/>
    <updated>2012-05-21T11:22:00+08:00</updated>
    <id>http://wwq0327.github.com/blog/2012/05/21/django-south-install</id>
    <content type="html"><![CDATA[<h3>创建虚拟环境</h3>

<p><code>bash
[wyatt@localhost git]$ virtualenv my_app
New python executable in my_app/bin/python
Installing setuptools............done.
Installing pip...............done.
</code></p>

<p><code>bash
$ cd my_app
$ source bin/active
</code></p>

<h3>安装django</h3>

<p><code>bash
$ pip install django==1.3
</code></p>

<h3>创建项目</h3>

<p><code>bash
$ django-admin.py startproject my_prj
</code>
<code>bash
$ chmod +x manage.py
</code></p>

<p><code>bash
$ cd my_prj
$ ./manage.py startapp app
</code></p>

<h3>安装South</h3>

<p><code>bash
$ pip install south
</code></p>

<h3>setttings.py 修改</h3>

<p>将south加入到 <code>INSTALLED_APP</code>中。</p>

<p>同步数据库</p>

<p><code>bash
./manage.py syncdb
</code></p>

<p>```python</p>

<p>DATABASES = {</p>

<pre><code>'default': {
    'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
    'NAME': 'test.db',                      # Or path to database file if using sqlite3.
    'USER': '',                      # Not used with sqlite3.
    'PASSWORD': '',                  # Not used with sqlite3.
    'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
    'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
}
</code></pre>

<p>}
```</p>

<h3>创建app的数据模型</h3>

<p>```python</p>

<h1>filename: app/models.py</h1>

<p>from django.db import models</p>

<p>class Blog(models.Model):</p>

<pre><code>title = models.CharField(max_length=255)

def __unicode__(self):
    return self.title
</code></pre>

<p>```</p>

<p>将 <code>app</code> 安装到 <code>INSTALLED_APP</code>中。</p>

<p>```bash</p>

<p>(my_app)[wyatt@localhost my_prj]$ ./manage.py schemamigration app --initial
Creating migrations directory at '/home/wyatt/git/my_app/my_prj/app/migrations'...
Creating <strong>init</strong>.py in '/home/wyatt/git/my_app/my_prj/app/migrations'...
 + Added model app.Blog
Created 0001_initial.py. You can now apply this migration with: ./manage.py migrate app</p>

<p>```</p>

<p>创建应用的数据表</p>

<p>```bash
(my_app)[wyatt@localhost my_prj]$ ./manage.py migrate app
Running migrations for app:
 - Migrating forwards to 0001_initial.</p>

<blockquote><p>app:0001_initial
 - Loading initial data for app.
No fixtures found.
```</p></blockquote>

<p>修改models.py，添加一个content字段：</p>

<p>```python</p>

<pre><code>content = models.TextField()
</code></pre>

<p>```</p>

<p>再执行：
```bash</p>

<p>(my_app)[wyatt@localhost my_prj]$ ./manage.py schemamigration app --auto
 ? The field 'Blog.content' does not have a default specified, yet is NOT NULL.
 ? Since you are adding this field, you MUST specify a default
 ? value to use for existing rows. Would you like to:
 ?  1. Quit now, and add a default to the field in models.py
 ?  2. Specify a one-off value to use for existing columns now
 ? Please select a choice: 1</p>

<p>```</p>

<p>字段非空</p>

<p>将 <code>models.py</code> 修改下：
```python</p>

<pre><code>content = models.TextField(blank=True)
</code></pre>

<p>```</p>

<p><code>bash
(my_app)[wyatt@localhost my_prj]$ ./manage.py schemamigration app --auto
 + Added field content on app.Blog
Created 0002_auto__add_field_blog_content.py. You can now apply this migration with: ./manage.py migrate app
</code></p>

<p>将更改应用到数据表中</p>

<p>```bash
(my_app)[wyatt@localhost my_prj]$ ./manage.py migrate app
Running migrations for app:
 - Migrating forwards to 0002_auto__add_field_blog_content.</p>

<blockquote><p>app:0002_auto__add_field_blog_content
 - Loading initial data for app.
No fixtures found.
```</p></blockquote>

<p>参考：</p>

<p>http://pressedweb.com/tutorials/django-djourney-introduction-to-south/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己所感的关于django的事]]></title>
    <link href="http://wwq0327.github.com/blog/2012/05/21/about-django-use/"/>
    <updated>2012-05-21T09:36:00+08:00</updated>
    <id>http://wwq0327.github.com/blog/2012/05/21/about-django-use</id>
    <content type="html"><![CDATA[<p>最近几天在写一个社区使用的学习平台，基本Django开发。所用的知识也并非是很前卫的东西，都是自己以前所积累的一些知识，尽管Django已不需要自己一点点的从头做起了，但我仍使用了不少的扩展来完成的这个工作。平台现在所具备的功能类似于博客，只是会是多用户的，有一些个人信息方面的管理功能等。</p>

<p>每次写一个新的东西，都会有不少的收获，尽管所用功能和以前类似，扩展方面我使用了下面几个：</p>

<ol>
<li>userena　这个扩展用来完成用户注册方面的工作，也具备用户个人信息的管理方面的任务，如头像修改，密码、邮箱修改，激活等方面的功能。</li>
<li>south 这个是拿来对django本身数据库操作不灵活而设计的，我现在还没研究明白。</li>
<li>django-tagging 标签管理</li>
<li>easy-thumbnails　缩略图</li>
<li>django-pagination　分页功能</li>
<li>django-ckeditor　管理器</li>
<li>django-bootstrap　样式</li>
</ol>


<p>有了这些东西，自己只是将精力花在自己核心的数据视图以及模板代码的编写上就行了，真的省了不少的事。django挺大的，许多的功能我还不清楚，也不知道怎么用，做这个平台，尽管才开始做，但我想随着开发进一步深入，所以学习和学到的东西还是挺多的。</p>

<p>另外自己在数据模型的操作上还有了进一步的感悟，深感ORM的强大，由于都是自己一个人试着去做，一遇不懂的就Google，可能也会挺片面的，需要多参考下别人编写的代码。</p>
]]></content>
  </entry>
  
</feed>
